#include "SSL.h"

namespace Upp {

#if 1
String GetP7Signature_imp(const void *data, int length, const String& cert_pem, const String& pkey_pem)
{
	SslCertificate x509;
	SslKey pkey;
	if(!x509.Load(cert_pem))
		return Null;
	if(!pkey.Load(pkey_pem))
		return Null;

	SslStream in;
	in.OpenBuffer((const char *)data, length);

    PKCS7 *p7 = PKCS7_sign(x509, pkey, NULL, in, PKCS7_DETACHED|PKCS7_BINARY|PKCS7_STREAM);

    if (!p7)
        return Null;

	SslStream out;
	out.CreateBuffer();

	String r;
    if (SMIME_write_PKCS7(out, p7, in, PKCS7_DETACHED|PKCS7_BINARY|PKCS7_STREAM)) {
		SslStream out1;
		out1.CreateBuffer();
		i2d_PKCS7_bio(out1, p7);
		r = out1.GetResult();
    }
  
    PKCS7_free(p7);
    
	return r;
}

#else

String GetP7Signature_imp(const void *data, int length, const String& cert_pem, const String& pkey_pem)
{
	SslCertificate x509;
	SslKey pkey;
	if(!x509.Load(cert_pem))
		return Null;
	if(!pkey.Load(pkey_pem))
		return Null;

	DDUMP(length);

	String infilename = GetHomeDirFile("p7.in");
	String outfilename = GetHomeDirFile("p7.out");
	{ FileOut fo(infilename); fo.Put(data, length); }
	
	BIO *infile = BIO_new_file(infilename, "r");
	BIO *outfile = BIO_new_file(outfilename, "w");
	
	int flags = PKCS7_DETACHED|PKCS7_BINARY|PKCS7_STREAM;

    PKCS7 *p7 = PKCS7_sign(x509, pkey, NULL, infile, flags);

    if (!p7)
        return Null;

	SslStream out;
	out.CreateBuffer();

	String r;
    if(SMIME_write_PKCS7(outfile, p7, infile, flags)) {
		BIO_free(outfile);
		String s = LoadFile(outfilename);
		DDUMP(s);
		int p1 = s.FindAfter("Content-Disposition: attachment; filename=\"smime.p7s\"");
		if(p1 >= 0) {
			int p2 = s.Find("----", p1);
			if(p2 >= 0) {
				DDUMP(p1);
				DDUMP(p2);
				DDUMP(s.Mid(p1, p2 - p1));
				r = Base64Decode(s.Mid(p1, p2 - p1));
				DDUMP(r.GetCount());
			}
		}
    }
    else
        BIO_free(outfile);
  
    PKCS7_free(p7);
	BIO_free(infile);
    
	return r;
}

#endif

extern String (*GetP7Signature__)(const void *data, int length, const String& cert_pem, const String& pkey_pem);

INITBLOCK {
	GetP7Signature__ = GetP7Signature_imp;
}

}
